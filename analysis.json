{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ApiElements",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "amf-helper-mixin.html",
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 21,
          "column": 26
        }
      },
      "mixins": [
        {
          "description": "Common functions used by AMF components to compute AMF values.\n\n## Updating API's base URI\n\n(Only applies when using `_computeEndpointUri()` function)\n\nBy default the component render the documentation as it is defined\nin the AMF model. Sometimes, however, you may need to replace the base URI\nof the API with something else. It is useful when the API does not\nhave base URI property defined (therefore this component render relative\npaths instead of URIs) or when you want to manage different environments.\n\nTo update base URI value either update `baseUri` property or use\n`iron-meta` with key `ApiBaseUri`. First method is easier but the second\ngives much more flexibility since it use a\n[monostate pattern](http://wiki.c2.com/?MonostatePattern)\nto manage base URI property.\n\nWhen the component constructs the funal URI for the endpoint it does the following:\n- if `baseUri` is set it uses this value as a base uri for the endpoint\n- else if `iron-meta` with key `ApiBaseUri` exists and contains a value\nit uses it uses this value as a base uri for the endpoint\n- else if `amfModel` is set then it computes base uri value from main\nmodel document\nThen it concatenates computed base URI with `endpoint`'s path property.",
          "summary": "",
          "path": "amf-helper-mixin.html",
          "properties": [
            {
              "name": "amfModel",
              "type": "(Object | Array)",
              "description": "Generated AMF json/ld model form the API spec.\nThe element assumes the object of the first array item to be a\ntype of `\"http://raml.org/vocabularies/document#Document`\non AMF vocabulary.\n\nIt is only usefult for the element to resolve references.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 8
                },
                "end": {
                  "line": 129,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "ns",
              "type": "Object | null | undefined",
              "description": "A namespace for AMF model",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 133,
                  "column": 8
                },
                "end": {
                  "line": 139,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Object"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_getAmfKey",
              "description": "Returns compact model key for given value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "String",
                  "description": "AMF orioginal property"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Compact model property name or the same value if\nvalue not found in the context."
              }
            },
            {
              "name": "_ensureAmfModel",
              "description": "Ensures that the model is AMF object.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "amf",
                  "type": "(Object | Array)",
                  "description": "AMF json/ld model"
                }
              ],
              "return": {
                "type": "(Object | undefined)",
                "desc": "API spec"
              }
            },
            {
              "name": "_ensureArray",
              "description": "Ensures that the value is an array.\nIt returns undefined when there's no value.\nIt returns the same array if the value is already an array.\nIt returns new array of the item is not an array.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 207,
                  "column": 4
                },
                "end": {
                  "line": 215,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "(Array | any)",
                  "description": "An item to test"
                }
              ],
              "return": {
                "type": "(Array | undefined)"
              }
            },
            {
              "name": "_getValue",
              "description": "Gets a signle scalar value from a model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 222,
                  "column": 4
                },
                "end": {
                  "line": 240,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "Amf model to extract the value from."
                },
                {
                  "name": "key",
                  "type": "String",
                  "description": "Model key to search for the value"
                }
              ],
              "return": {
                "type": "any",
                "desc": "Value for key"
              }
            },
            {
              "name": "_getValueArray",
              "description": "Gets values from a model as an array of `@value` properties.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 4
                },
                "end": {
                  "line": 254,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "Amf model to extract the value from."
                },
                {
                  "name": "key",
                  "type": "String",
                  "description": "Model key to search for the value"
                }
              ],
              "return": {
                "type": "Array.<any>",
                "desc": "Value for key"
              }
            },
            {
              "name": "_hasType",
              "description": "Checks if a model has a type.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 261,
                  "column": 4
                },
                "end": {
                  "line": 273,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "Model to test"
                },
                {
                  "name": "type",
                  "type": "String",
                  "description": "Type name"
                }
              ],
              "return": {
                "type": "Boolean",
                "desc": "True if model has a type."
              }
            },
            {
              "name": "_hasProperty",
              "description": "Checks if a shape has a property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 280,
                  "column": 4
                },
                "end": {
                  "line": 283,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "?Object",
                  "description": "The shape to test"
                },
                {
                  "name": "key",
                  "type": "?String",
                  "description": "Property name to test"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_computePropertyArray",
              "description": "Computes array value of a property in a model (shape).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 301,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "Object",
                  "description": "AMF shape object"
                },
                {
                  "name": "key",
                  "type": "String",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "(Array.<any> | undefined)"
              }
            },
            {
              "name": "_computePropertyObject",
              "description": "Computes a value of a property in a model (shape).\nIt takes first value of a property, if exists.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 310,
                  "column": 4
                },
                "end": {
                  "line": 314,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "Object",
                  "description": "AMF shape object"
                },
                {
                  "name": "key",
                  "type": "String",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "(any | undefined)"
              }
            },
            {
              "name": "_computeHasStringValue",
              "description": "Tests if a passed argumet exists.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 323,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "(String | Object | Number)",
                  "description": "A value to test"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_computeHasArrayValue",
              "description": "Computes if passed argument is an array and has a value.\nIt does not check for type or value of the array items.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 330,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "Array",
                  "description": "Value to test"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_computeDescription",
              "description": "Computes description for a shape.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 338,
                  "column": 4
                },
                "end": {
                  "line": 340,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "Object",
                  "description": "AMF shape"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Description value."
              }
            },
            {
              "name": "_computeHeaders",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 342,
                  "column": 4
                },
                "end": {
                  "line": 344,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape"
                }
              ]
            },
            {
              "name": "_computeQueryParameters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 346,
                  "column": 4
                },
                "end": {
                  "line": 348,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape"
                }
              ]
            },
            {
              "name": "_computeResponses",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 350,
                  "column": 4
                },
                "end": {
                  "line": 352,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape"
                }
              ]
            },
            {
              "name": "_computeServerVariables",
              "description": "Computes value for `serverVariables` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 359,
                  "column": 4
                },
                "end": {
                  "line": 361,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "server",
                  "type": "Object",
                  "description": "AMF API model for Server."
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)",
                "desc": "Variables if defined."
              }
            },
            {
              "name": "_computeEndpointVariables",
              "description": "Computes value for `endpointVariables` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 368,
                  "column": 4
                },
                "end": {
                  "line": 370,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "endpoint",
                  "type": "Object",
                  "description": "Endpoint model"
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)",
                "desc": "Parameters if defined."
              }
            },
            {
              "name": "_computePayload",
              "description": "Computes value for the `payload` property",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 377,
                  "column": 4
                },
                "end": {
                  "line": 379,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expects",
                  "type": "Object",
                  "description": "Current value of `expects` property."
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)",
                "desc": "Payload model if defined."
              }
            },
            {
              "name": "_computeReturns",
              "description": "Computes value for `returns` property",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 386,
                  "column": 4
                },
                "end": {
                  "line": 388,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "method",
                  "type": "Object",
                  "description": "AMF `supportedOperation` model"
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)"
              }
            },
            {
              "name": "_computeSecurity",
              "description": "Computes value for `security` property",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 395,
                  "column": 4
                },
                "end": {
                  "line": 397,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "method",
                  "type": "Object",
                  "description": "AMF `supportedOperation` model"
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)"
              }
            },
            {
              "name": "_computeHasCustomProperties",
              "description": "Computes value for `hasCustomProperties` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 404,
                  "column": 4
                },
                "end": {
                  "line": 406,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "Object",
                  "description": "AMF `supportedOperation` model"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_computeApiVersion",
              "description": "Computes API version from the AMF model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 413,
                  "column": 4
                },
                "end": {
                  "line": 419,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "amfModel",
                  "type": "(Object | Array.<Object>)"
                }
              ],
              "return": {
                "type": "(String | undefined)"
              }
            },
            {
              "name": "_computeEncodes",
              "description": "Computes model's `encodes` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 426,
                  "column": 4
                },
                "end": {
                  "line": 438,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "?Object",
                  "description": "AMF data model"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "List of encodes"
              }
            },
            {
              "name": "_computeDeclares",
              "description": "Computes list of declarations in the AMF api model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 445,
                  "column": 4
                },
                "end": {
                  "line": 458,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Array | Object)",
                  "description": "AMF json/ld model for an API"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "List of declarations"
              }
            },
            {
              "name": "_computeReferences",
              "description": "Computes list of references in the AMF api model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 465,
                  "column": 4
                },
                "end": {
                  "line": 478,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Array | Object)",
                  "description": "AMF json/ld model for an API"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "List of declarations"
              }
            },
            {
              "name": "_computeWebApi",
              "description": "Computes AMF's `http://schema.org/WebAPI` model",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 485,
                  "column": 4
                },
                "end": {
                  "line": 493,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Array | Object)",
                  "description": "AMF json/ld model for an API"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "Web API declaration."
              }
            },
            {
              "name": "_computeServer",
              "description": "Computes value for `server` property that is later used with other computations.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 500,
                  "column": 4
                },
                "end": {
                  "line": 508,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Array | Object)",
                  "description": "AMF model for an API"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "The server model"
              }
            },
            {
              "name": "_computeEndpointUri",
              "description": "Computes endpoint's URI based on `amfModel` and `endpoint` models.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 518,
                  "column": 4
                },
                "end": {
                  "line": 530,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "server",
                  "type": "Object",
                  "description": "Server model of AMF API."
                },
                {
                  "name": "endpoint",
                  "type": "Object",
                  "description": "Endpoint model"
                },
                {
                  "name": "baseUri",
                  "type": "?String",
                  "description": "Current value of `baseUri` property"
                },
                {
                  "name": "version",
                  "type": "?String",
                  "description": "API current version"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Endpoint's URI"
              }
            },
            {
              "name": "_getBaseUri",
              "description": "Computes base URI value from either `baseUri`, `iron-meta` with\n`ApiBaseUri` key or `amfModel` value (in this order).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 540,
                  "column": 4
                },
                "end": {
                  "line": 551,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseUri",
                  "type": "String",
                  "description": "Value of `baseUri` property"
                },
                {
                  "name": "server",
                  "type": "Object",
                  "description": "AMF API model for Server."
                },
                {
                  "name": "protocols",
                  "type": "?Array.<String>",
                  "description": "List of supported protocols"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Base uri value. Can be empty string."
              }
            },
            {
              "name": "_getAmfBaseUri",
              "description": "Computes base URI from AMF model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 561,
                  "column": 4
                },
                "end": {
                  "line": 565,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "server",
                  "type": "Object",
                  "description": "AMF API model for Server."
                },
                {
                  "name": "protocols",
                  "type": "?Array.<String>",
                  "description": "Listy of supporte dprotocols. If not\nprovided and required to compute the url it uses `amfModel` to compute\nprotocols"
                }
              ],
              "return": {
                "type": "(String | undefined)",
                "desc": "Base uri value if exists."
              }
            },
            {
              "name": "_ensureUrlScheme",
              "description": "A function that makes sure that the URL has a scheme definition.\nIf no supported protocols information is available it assumes `http`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 577,
                  "column": 4
                },
                "end": {
                  "line": 591,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "A url value"
                },
                {
                  "name": "protocols",
                  "type": "?Array.<String>",
                  "description": "List of supported by the API protocols\nAn array of string like: `['HTTP', 'HTTPS']`. It lowercase the value.\nIf not set it tries to read supported protocols value from `amfModel`\nproperty."
                }
              ],
              "return": {
                "type": "String",
                "desc": "Url with scheme."
              }
            },
            {
              "name": "_computeProtocols",
              "description": "Computes supported protocols by the API.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 598,
                  "column": 4
                },
                "end": {
                  "line": 604,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Object | Array)",
                  "description": "AMF data model"
                }
              ],
              "return": {
                "type": "(Array.<String> | undefined)"
              }
            },
            {
              "name": "_computeExpects",
              "description": "Computes value for the `expects` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 611,
                  "column": 4
                },
                "end": {
                  "line": 619,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "method",
                  "type": "Object",
                  "description": "AMF `supportedOperation` model"
                }
              ],
              "return": {
                "type": "Object"
              }
            },
            {
              "name": "_computePropertyValue",
              "description": "Tries to find an example value (whether it's default value or from an\nexample) to put it into snippet's values.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 627,
                  "column": 4
                },
                "end": {
                  "line": 648,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "Object",
                  "description": "A http://raml.org/vocabularies/http#Parameter property"
                }
              ],
              "return": {
                "type": "(String | undefined)"
              }
            },
            {
              "name": "_computeEndpoints",
              "description": "Computes list of endpoints from a WebApi model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 654,
                  "column": 4
                },
                "end": {
                  "line": 660,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object"
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Always returns an array of endpoints."
              }
            },
            {
              "name": "_computeEndpointModel",
              "description": "Computes model for an endpoint documentation.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 668,
                  "column": 4
                },
                "end": {
                  "line": 671,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "Current value of `webApi` property"
                },
                {
                  "name": "id",
                  "type": "String",
                  "description": "Selected shape ID"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "An endponit definition"
              }
            },
            {
              "name": "_computeEndpointByPath",
              "description": "Computes model for an endpoint documentation using it's path.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 679,
                  "column": 4
                },
                "end": {
                  "line": 690,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "Current value of `webApi` property"
                },
                {
                  "name": "path",
                  "type": "String",
                  "description": "Endpoint path"
                }
              ],
              "return": {
                "type": "(Object | undefined)",
                "desc": "An endponit definition"
              }
            },
            {
              "name": "_computeMethodModel",
              "description": "Computes method for the method documentation.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 698,
                  "column": 4
                },
                "end": {
                  "line": 704,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "Current value of `webApi` property"
                },
                {
                  "name": "selected",
                  "type": "String",
                  "description": "Selected shape"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "A method definition"
              }
            },
            {
              "name": "_computeOperations",
              "description": "Computes list of operations in an endpoint",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 711,
                  "column": 4
                },
                "end": {
                  "line": 718,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "The WebApi AMF model"
                },
                {
                  "name": "id",
                  "type": "String",
                  "description": "Endpoint ID"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "List of SupportedOperation objects"
              }
            },
            {
              "name": "_computeMethodEndpoint",
              "description": "Computes an endpoint for a method.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 725,
                  "column": 4
                },
                "end": {
                  "line": 746,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "The WebApi AMF model"
                },
                {
                  "name": "methodId",
                  "type": "String",
                  "description": "Method id"
                }
              ],
              "return": {
                "type": "(Object | undefined)",
                "desc": "An endpoint model of undefined."
              }
            },
            {
              "name": "__computeMethodsListForMethod",
              "description": "Computes a list of methods for an endpoint that contains a method with\ngiven id.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 755,
                  "column": 4
                },
                "end": {
                  "line": 762,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "WebApi model"
                },
                {
                  "name": "methodId",
                  "type": "String",
                  "description": "Method id."
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)",
                "desc": "A list of sibling methods or undefined."
              }
            },
            {
              "name": "_computeType",
              "description": "Computes a type documentation model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 788,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "declares",
                  "type": "Array",
                  "description": "Current value of `declares` property"
                },
                {
                  "name": "references",
                  "type": "?Array",
                  "description": "Current value of `references` property"
                },
                {
                  "name": "selected",
                  "type": "String",
                  "description": "Selected shape"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "A type definition"
              }
            },
            {
              "name": "_computeReferenceType",
              "description": "Computes a type model from a reference (library for example).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 795,
                  "column": 4
                },
                "end": {
                  "line": 810,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reference",
                  "type": "(Object | Array)",
                  "description": "AMF model for a reference to extract the data from"
                },
                {
                  "name": "selected",
                  "type": "String",
                  "description": "Node ID to look for"
                }
              ],
              "return": {
                "type": "(Object | undefined)",
                "desc": "Type definition or undefined if not found."
              }
            },
            {
              "name": "_computeSecurityModel",
              "description": "Computes model for selected security definition.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 818,
                  "column": 4
                },
                "end": {
                  "line": 823,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "declares",
                  "type": "Array",
                  "description": "Current value of `declares` property"
                },
                {
                  "name": "selected",
                  "type": "String",
                  "description": "Selected shape"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "A security definition"
              }
            },
            {
              "name": "_computeDocument",
              "description": "Computes a documentation model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 831,
                  "column": 4
                },
                "end": {
                  "line": 838,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "webApi",
                  "type": "Object",
                  "description": "Current value of `webApi` property"
                },
                {
                  "name": "selected",
                  "type": "String",
                  "description": "Selected shape"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "A method definition"
              }
            },
            {
              "name": "_resolve",
              "description": "Resolves a reference to an external fragment.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 894,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape",
                  "type": "Object",
                  "description": "A shape to resolve"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "Resolved shape."
              }
            },
            {
              "name": "_getLinkTarget",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 896,
                  "column": 4
                },
                "end": {
                  "line": 918,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "amf"
                },
                {
                  "name": "id"
                }
              ]
            },
            {
              "name": "_getReferenceId",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 920,
                  "column": 4
                },
                "end": {
                  "line": 937,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "amf"
                },
                {
                  "name": "id"
                }
              ]
            },
            {
              "name": "_resolveRecursive",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 939,
                  "column": 4
                },
                "end": {
                  "line": 950,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "shape"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getExampleValue",
              "description": "Gets string value for an example data model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 959,
                  "column": 4
                },
                "end": {
                  "line": 972,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "Object",
                  "description": "Example item model"
                },
                {
                  "name": "isJson",
                  "type": "Boolean",
                  "description": "If set it checks if the `raw` value is valid JSON.\nIf it isn't then it parses structured value."
                }
              ],
              "return": {
                "type": "String"
              }
            },
            {
              "name": "_computeExampleFromStructuredValue",
              "description": "Computes an example from example structured value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 979,
                  "column": 4
                },
                "end": {
                  "line": 1000,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "`structuredValue` item model."
                }
              ],
              "return": {
                "type": "(Object | Array)",
                "desc": "Javascript object or array with structured value."
              }
            },
            {
              "name": "_computeStructuredExampleValue",
              "description": "Computes value with propert data type for a structured example.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1006,
                  "column": 4
                },
                "end": {
                  "line": 1032,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "Structured example item model."
                }
              ],
              "return": {
                "type": "(String | Boolean | Number)",
                "desc": "Value for the example."
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 0
            },
            "end": {
              "line": 1035,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ApiElements.AmfHelperMixin",
          "attributes": [
            {
              "name": "amf-model",
              "description": "Generated AMF json/ld model form the API spec.\nThe element assumes the object of the first array item to be a\ntype of `\"http://raml.org/vocabularies/document#Document`\non AMF vocabulary.\n\nIt is only usefult for the element to resolve references.",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 8
                },
                "end": {
                  "line": 129,
                  "column": 32
                }
              },
              "metadata": {},
              "type": "(Object | Array)"
            },
            {
              "name": "ns",
              "description": "A namespace for AMF model",
              "sourceRange": {
                "start": {
                  "line": 133,
                  "column": 8
                },
                "end": {
                  "line": 139,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ]
}
