/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   amf-helper-mixin.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />

declare namespace ApiElements {


  /**
   * Common functions used by AMF components to compute AMF values.
   *
   * ## Updating API's base URI
   *
   * (Only applies when using `_computeEndpointUri()` function)
   *
   * By default the component render the documentation as it is defined
   * in the AMF model. Sometimes, however, you may need to replace the base URI
   * of the API with something else. It is useful when the API does not
   * have base URI property defined (therefore this component render relative
   * paths instead of URIs) or when you want to manage different environments.
   *
   * To update base URI value either update `baseUri` property or use
   * `iron-meta` with key `ApiBaseUri`. First method is easier but the second
   * gives much more flexibility since it use a [monostate pattern](http://wiki.c2.com/?MonostatePattern)
   * to manage base URI property.
   *
   * When the component constructs the funal URI for the endpoint it does the following:
   * - if `baseUri` is set it uses this value as a base uri for the endpoint
   * - else if `iron-meta` with key `ApiBaseUri` exists and contains a value
   * it uses it uses this value as a base uri for the endpoint
   * - else if `amfModel` is set then it computes base uri value from main
   * model document
   * Then it concatenates computed base URI with `endpoint`'s path property.
   */
  function AmfHelperMixin<T extends new (...args: any[]) => {}>(base: T): T & AmfHelperMixinConstructor;

  interface AmfHelperMixinConstructor {
    new(...args: any[]): AmfHelperMixin;
  }

  interface AmfHelperMixin {

    /**
     * Generated AMF json/ld model form the API spec.
     * The element assumes the object of the first array item to be a
     * type of `"http://raml.org/vocabularies/document#Document`
     * on AMF vocabulary.
     *
     * It is only usefult for the element to resolve references.
     */
    amfModel: object|any[]|null;

    /**
     * Gets a signle scalar value from a model.
     *
     * @param model Amf model to extract the value from.
     * @param key Model key to search for the value
     * @returns Value for key
     */
    _getValue(model: object|null, key: String|null): any|null;

    /**
     * Gets values from a model as an array of `@value` properties.
     *
     * @param model Amf model to extract the value from.
     * @param key Model key to search for the value
     * @returns Value for key
     */
    _getValueArray(model: object|null, key: String|null): Array<any|null>|null;

    /**
     * Checks if a model has a type.
     *
     * @param model Model to test
     * @param type Type name
     * @returns True if model has a type.
     */
    _hasType(model: object|null, type: String|null): Boolean|null;

    /**
     * Checks if a shape has a property.
     *
     * @param key Property name to test
     */
    _hasProperty(model: any, key: String|null): Boolean|null;
    _computePropertyArray(shape: any, key: any): any;
    _computePropertyObject(shape: any, key: any): any;
    _computeHasStringValue(value: any): any;
    _computeHasArrayValue(value: any): any;
    _computeDescription(shape: any): any;
    _computeHeaders(shape: any): any;
    _computeQueryParameters(shape: any): any;
    _computeResponses(shape: any): any;

    /**
     * Computes value for `serverVariables` property.
     *
     * @param server AMF API model for Server.
     * @returns Variables if defined.
     */
    _computeServerVariables(server: object|null): Array<object|null>|null|undefined;

    /**
     * Computes value for `endpointVariables` property.
     *
     * @param endpoint Endpoint model
     * @returns Parameters if defined.
     */
    _computeEndpointVariables(endpoint: object|null): Array<object|null>|null|undefined;

    /**
     * Computes value for the `payload` property
     *
     * @param expects Current value of `expects` property.
     * @returns Payload model if defined.
     */
    _computePayload(expects: object|null): Array<object|null>|null|undefined;

    /**
     * Computes value for `returns` property
     *
     * @param method AMF `supportedOperation` model
     */
    _computeReturns(method: object|null): Array<object|null>|null|undefined;

    /**
     * Computes value for `security` property
     *
     * @param method AMF `supportedOperation` model
     */
    _computeSecurity(method: object|null): Array<object|null>|null|undefined;

    /**
     * Computes value for `hasCustomProperties` property.
     *
     * @param shape AMF `supportedOperation` model
     */
    _computeHasCustomProperties(shape: object|null): Boolean|null;

    /**
     * Computes value for `server` property that is later used with other computations.
     *
     * @param model AMF model for an API
     * @returns The server model
     */
    _computeServer(model: any[]|object|null): object|null;

    /**
     * Computes endpoint's URI based on `amfModel` and `endpoint` models.
     *
     * @param server Server model of AMF API.
     * @param endpoint Endpoint model
     * @param baseUri Current value of `baseUri` property
     * @returns Endpoint's URI
     */
    _computeEndpointUri(server: object|null, endpoint: object|null, baseUri: String|null): String|null;

    /**
     * Computes base URI value from either `baseUri`, `iron-meta` with
     * `ApiBaseUri` key or `amfModel` value (in this order).
     *
     * @param baseUri Value of `baseUri` property
     * @param server AMF API model for Server.
     * @returns Base uri value. Can be empty string.
     */
    _getBaseUri(baseUri: String|null, server: object|null): String|null;

    /**
     * Computes base URI from AMF model.
     *
     * @param server AMF API model for Server.
     * @returns Base uri value if exists.
     */
    _getAmfBaseUri(server: object|null): String|null|undefined;

    /**
     * Computes value for the `expects` property.
     *
     * @param method AMF `supportedOperation` model
     */
    _computeExpects(method: object|null): object|null;

    /**
     * Tries to find an example value (whether it's default value or from an
     * example) to put it into snippet's values.
     *
     * @param item A http://raml.org/vocabularies/http#Parameter property
     */
    _computePropertyValue(item: object|null): String|null|undefined;
  }
}
