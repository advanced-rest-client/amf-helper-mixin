import { assert } from '@open-wc/testing';
import { AmfLoader } from '../AmfLoader.js';
import { AmfSerializer } from '../../index.js';

/** @typedef {import('../../src/types').ApiNodeShape} ApiNodeShape */

describe('Source maps', () => {
  const jsonMime = 'application/json';
  // const xmlMime = 'application/xml';

  [true, false].forEach(compact => {
    let api;
    /** @type AmfSerializer */
    let serializer;
    before(async () => {
      api = await AmfLoader.load(compact);
      serializer = new AmfSerializer(api);
    });

    describe(compact ? 'Compact model' : 'Full model', () => {
      it('adds parsedJsonSchema', () => {
        const shape = AmfLoader.lookupRequestPayload(api, '/json', 'post', jsonMime);
        let schema = shape[serializer._getAmfKey(serializer.ns.aml.vocabularies.shapes.schema)];
        if (Array.isArray(schema)) {
          [schema] = schema;
        }
        const result = serializer.unknownShape(schema);

        const { parsedJsonSchema } = result.sourceMaps;
        assert.typeOf(parsedJsonSchema, 'object', 'has parsedJsonSchema');
        assert.typeOf(parsedJsonSchema.id, 'string', 'has the id');
        assert.typeOf(parsedJsonSchema.element, 'string', 'has the element');
        assert.typeOf(parsedJsonSchema.value, 'string', 'has the value');
      });

      it('adds autoGeneratedName', () => {
        const shape = AmfLoader.lookupRequestPayload(api, '/json', 'post', jsonMime);
        let schema = shape[serializer._getAmfKey(serializer.ns.aml.vocabularies.shapes.schema)];
        if (Array.isArray(schema)) {
          [schema] = schema;
        }
        const result = serializer.unknownShape(schema);

        const { autoGeneratedName } = result.sourceMaps;
        assert.typeOf(autoGeneratedName, 'array', 'has autoGeneratedName array');

        const [item] = autoGeneratedName;
        assert.typeOf(item.id, 'string', 'has the id');
        assert.typeOf(item.element, 'string', 'has the element');
        assert.typeOf(item.value, 'string', 'has the value');
      });
    });
  })
});
